Реорганизация цифрового архива Сова Минервы включила в себя следующие этапы:

Механическое объединение архивов В.В.Файера и Н.В. Брагинской в одной директории.
Создание списка файлов, входящих в данный архив.
Выявление дубликатов видео (1 этап сверки (имя, размер)).
Выявление дубликатов видео (2 этап (сопоставление контрольных сумм файлов, Get-FileHash)).
Приведение файлов к единому формату данных (унификация видеоматериалов, перекодировка в формат MP4).
Создание отсутствующих расшифровок записей, их включение в архив.
.
site-root/
├── _config.yml         # Конфигурационный файл Jekyll
├── _layouts/           # Папка для шаблонов страниц
│   ├── default.html    # Шаблон по умолчанию
│   └── post.html       # Шаблон для постов блога
├── _posts/             # Папка для постов блога (если используется)
├── assets/             # Папка для статических ресурсов (CSS, JS, изображения и т. д.)
│   ├── css/
│   │   └── main.css    # Главный файл CSS
│   ├── js/
│   │   └── main.js     # Главный файл JavaScript
│   └── img/            # Папка для изображений
├── projects/           # Папка с информацией о проектах
│   ├── sowa-minervy/   # Папка для проекта "Проект Сова Минервы"
│   │   ├── index.md    # Главная страница проекта
│   │   └── assets/     # Дополнительные ресурсы проекта (изображения, документы и т. д.)
│   ├── project-group/  # Папка для проектной группы
│   │   ├── index.md    # Главная страница проектной группы
│   │   └── assets/     # Дополнительные ресурсы проектной группы
│   └── archive/        # Папка для реорганизации архива
│       ├── index.md    # Главная страница реорганизации архива
│       └── assets/     # Дополнительные ресурсы реорганизации архива
├── index.md            # Главная страница сайта
└── about.md            # Страница "О нас" или другая информационная страница


# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
